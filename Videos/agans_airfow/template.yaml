AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'agans_airflow

  Sample SAM Template for agans_airflow

  '
Parameters:
  EC2InstanceTypeNAT:
    Type: String
    Default: t3.medium
  EC2InstanceTypeAiflow:
    Type: String
    Default: t3.medium
  KeyNameNAT:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: agan_airflow
  KeyNameAirflow:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: agan_airflow
  BastionEC2AMI:
    Type: String
    Default: ami-09439f09c55136ecf
  AirflowEC2AMI:
    Type: String
    Default: ami-05f7491af5eef733a
Resources:
  BiVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  BiPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BiVPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-Private
      - Key: AZ
        Value:
          Fn::Select:
          - 0
          - Fn::GetAZs: ''
  BiPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      VpcId:
        Ref: BiVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-Public
      - Key: AZ
        Value:
          Fn::Select:
          - 0
          - Fn::GetAZs: ''
  BiInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  BiVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: BiInternetGateway
      VpcId:
        Ref: BiVPC
  BiRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: BiVPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-Public
  BiRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: BiVPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-Private
  BiInternetRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - BiVPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: BiRouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: BiInternetGateway
  BiSubnetRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: BiRouteTablePublic
      SubnetId:
        Ref: BiPublicSubnet
  BiBastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: BastionEC2AMI
      InstanceType:
        Ref: EC2InstanceTypeNAT
      KeyName:
        Ref: KeyNameNAT
      SubnetId:
        Ref: BiPublicSubnet
      SecurityGroupIds:
      - Ref: BiBastionSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: '#!/bin/bash

            sudo yum install cloud-init

            sudo yum update

            sudo sysctl -w net.ipv4.ip_forward=1

            sudo /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

            sudo yum install iptables-services -y

            sudo service iptables save

            '
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-BiBastionInstance
  BiBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Security group for ${AWS::StackName} bastion host
      VpcId:
        Ref: BiVPC
  BiBastionAllowInboundSSHFromInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: BiBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  BiBastionAllowInboundHTTPFromPrivateSubnet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: BiBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 10.0.0.0/24
  BiBastionAllowInboundHTTPSFromPrivateSubnet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: BiBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 10.0.0.0/24
  BiBastionAllowInboundICMPFromPrivateSubnet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: BiBastionSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/24
  BiAirflowInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: AirflowEC2AMI
      InstanceType:
        Ref: EC2InstanceTypeAiflow
      KeyName:
        Ref: KeyNameAirflow
      SubnetId:
        Ref: BiPrivateSubnet
      SecurityGroupIds:
      - Ref: BiAirflowSecurityGroup
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-BiAirflowInstance
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeType: gp2
          VolumeSize: '25'
          DeleteOnTermination: 'true'
          Encrypted: 'false'
      UserData:
        Fn::Base64:
          Fn::Sub: "#!/bin/bash\nsudo apt-get update \n\n# https://docs.docker.com/engine/install/ubuntu/\n\
            sudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg\
            \ \\\n    lsb-release\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg\
            \ | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\
            \necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]\
            \ https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\"\
            \ | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get\
            \ update\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io\
            \ -y\n\ndocker --version\n\n# https://docs.docker.com/compose/install/\n\
            sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname\
            \ -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\nsudo chmod +x\
            \ /usr/local/bin/docker-compose\n\ndocker-compose --version\n\ngit clone\
            \ https://github.com/fclesio/airflow-docker-operator-with-compose.git\n\
            \n#https://github.com/apache/airflow/blob/main/docs/apache-airflow/start/docker-compose.yaml\n\
            \ncd airflow-docker-operator-with-compose\n\nsudo docker-compose up -d\n\
            \nsudo chmod -R 777 *\n\nsudo chown -R ubuntu:ubuntu *\n"
  BiInternetRoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: BiRouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId:
        Ref: BiBastionInstance
  BiSubnetRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: BiRouteTablePrivate
      SubnetId:
        Ref: BiPrivateSubnet
  BiAirflowSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Internal Security group for ${AWS::StackName}
      VpcId:
        Ref: BiVPC
  BiAirflowAllowInboundSSHFromBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: BiAirflowSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  VPCPeeringConn:
    Properties:
      PeerRegion:
        Ref: AWS::Region
      PeerVpcId: vpc-1a57b273
      VpcId:
        Ref: BiVPC
Outputs:
  BiBastionPublicIp:
    Description: Bastion Public IP
    Value:
      Fn::Sub: http://${BiBastionInstance.PublicIp}
    Export:
      Name: BiBastionPublicIp
  BiAirflowPrivateIp:
    Description: Application Private IP
    Value:
      Fn::Sub: http://${BiAirflowInstance.PrivateIp}
    Export:
      Name: BiAirflowPrivateIp
